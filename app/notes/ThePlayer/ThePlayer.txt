The player character is currently comprised of 5 objects.
obj_<name>_attack_left
obj_<name>_attack_right
obj_<name>_walk_left
obj_<name>_walk_right
obj_<name>_idle


for each player object they must have a create event that registers the object with the player control object. `obj_control` using the following function
player_register_object_for_control(<id>, <type>);

Example for the walk left object: 

	player_register_object_for_control(id, player_object_type.walk_left);
	
	The <id> is the id of the object, <type> is one of the enum values for `player_object_type`


Player Idle Objects:
	Create Event additional setup 
		player_idle_setup(<time_to_wait>) sets the wait time in seconds {real}

		Example:
	
			player_idle_setup(3)
	
			have the idle animation wait for 3 seconds before starting to cycle frames.
	
	Alarm 0 event
		player_idle_start_animation();  // start cycling the idle animation frames
		
	UserEvent0
		player_go_idle(); // This event is called when the player stops moving, 
		
		
Player attack objects:

	Create event:
		the LEFT/RIGHT attack objects must register with the player controller seting the direction (.attack_right or .attack_left)
			player_register_object_for_control(id, player_object_type.attack_right); 

		The object must set visiblility to false.
			visible = false;
			
	Alarm 1 event:
		starts the handling of the attack ending.
			player_attack_end();
			
	Animation End event:
		player_attack_animation_end();

	User Event 0:
		this event starts the attack sequence.
			player_attack_start(RIGHT); // specify RIGHT or LEFT depending on the attack direction